// Code generated from java-escape by ANTLR 4.11.1. DO NOT EDIT.

package parser

import (
	"fmt"
	"sync"
	"unicode"

	"github.com/antlr/antlr4/runtime/Go/antlr/v4"
)

// Suppress unused import error
var _ = fmt.Printf
var _ = sync.Once{}
var _ = unicode.IsLetter

type AgeLexer struct {
	*antlr.BaseLexer
	channelNames []string
	modeNames    []string
	// TODO: EOF string
}

var agelexerLexerStaticData struct {
	once                   sync.Once
	serializedATN          []int32
	channelNames           []string
	modeNames              []string
	literalNames           []string
	symbolicNames          []string
	ruleNames              []string
	predictionContextCache *antlr.PredictionContextCache
	atn                    *antlr.ATN
	decisionToDFA          []*antlr.DFA
}

func agelexerLexerInit() {
	staticData := &agelexerLexerStaticData
	staticData.channelNames = []string{
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	}
	staticData.modeNames = []string{
		"DEFAULT_MODE",
	}
	staticData.literalNames = []string{
		"", "'['", "','", "']'", "'{'", "'}'", "':'", "'::vertex'", "'::edge'",
		"'::path'", "'::numeric'", "", "", "'null'",
	}
	staticData.symbolicNames = []string{
		"", "", "", "", "", "", "", "KW_VERTEX", "KW_EDGE", "KW_PATH", "KW_NUMERIC",
		"STRING", "BOOL", "NULL", "NUMBER", "FLOAT_EXPR", "NUMERIC", "WS",
	}
	staticData.ruleNames = []string{
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "KW_VERTEX", "KW_EDGE",
		"KW_PATH", "KW_NUMERIC", "STRING", "BOOL", "NULL", "ESC", "UNICODE",
		"HEX", "SAFECODEPOINT", "NUMBER", "FLOAT_EXPR", "NUMERIC", "INT", "EXP_INT",
		"EXP", "WS",
	}
	staticData.predictionContextCache = antlr.NewPredictionContextCache()
	staticData.serializedATN = []int32{
		4, 0, 17, 222, 6, -1, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2,
		4, 7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2,
		10, 7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15,
		7, 15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7,
		20, 2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 1, 0, 1, 0, 1, 1, 1, 1, 1,
		2, 1, 2, 1, 3, 1, 3, 1, 4, 1, 4, 1, 5, 1, 5, 1, 6, 1, 6, 1, 6, 1, 6, 1,
		6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1,
		8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1,
		9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 10, 1, 10, 1, 10, 5, 10, 98, 8, 10, 10, 10,
		12, 10, 101, 9, 10, 1, 10, 1, 10, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1,
		11, 1, 11, 1, 11, 1, 11, 3, 11, 114, 8, 11, 1, 12, 1, 12, 1, 12, 1, 12,
		1, 12, 1, 13, 1, 13, 1, 13, 3, 13, 124, 8, 13, 1, 14, 1, 14, 1, 14, 1,
		14, 1, 14, 1, 14, 1, 15, 1, 15, 1, 16, 1, 16, 1, 17, 3, 17, 137, 8, 17,
		1, 17, 1, 17, 1, 17, 4, 17, 142, 8, 17, 11, 17, 12, 17, 143, 3, 17, 146,
		8, 17, 1, 17, 3, 17, 149, 8, 17, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1,
		18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18,
		1, 18, 1, 18, 1, 18, 1, 18, 3, 18, 171, 8, 18, 1, 19, 3, 19, 174, 8, 19,
		1, 19, 1, 19, 1, 19, 4, 19, 179, 8, 19, 11, 19, 12, 19, 180, 3, 19, 183,
		8, 19, 1, 19, 3, 19, 186, 8, 19, 1, 19, 1, 19, 1, 20, 1, 20, 1, 20, 5,
		20, 193, 8, 20, 10, 20, 12, 20, 196, 9, 20, 3, 20, 198, 8, 20, 1, 21, 1,
		21, 1, 21, 5, 21, 203, 8, 21, 10, 21, 12, 21, 206, 9, 21, 3, 21, 208, 8,
		21, 1, 22, 1, 22, 3, 22, 212, 8, 22, 1, 22, 1, 22, 1, 23, 4, 23, 217, 8,
		23, 11, 23, 12, 23, 218, 1, 23, 1, 23, 0, 0, 24, 1, 1, 3, 2, 5, 3, 7, 4,
		9, 5, 11, 6, 13, 7, 15, 8, 17, 9, 19, 10, 21, 11, 23, 12, 25, 13, 27, 0,
		29, 0, 31, 0, 33, 0, 35, 14, 37, 15, 39, 16, 41, 0, 43, 0, 45, 0, 47, 17,
		1, 0, 8, 8, 0, 34, 34, 47, 47, 92, 92, 98, 98, 102, 102, 110, 110, 114,
		114, 116, 116, 3, 0, 48, 57, 65, 70, 97, 102, 3, 0, 0, 31, 34, 34, 92,
		92, 1, 0, 48, 57, 1, 0, 49, 57, 2, 0, 69, 69, 101, 101, 2, 0, 43, 43, 45,
		45, 3, 0, 9, 10, 13, 13, 32, 32, 234, 0, 1, 1, 0, 0, 0, 0, 3, 1, 0, 0,
		0, 0, 5, 1, 0, 0, 0, 0, 7, 1, 0, 0, 0, 0, 9, 1, 0, 0, 0, 0, 11, 1, 0, 0,
		0, 0, 13, 1, 0, 0, 0, 0, 15, 1, 0, 0, 0, 0, 17, 1, 0, 0, 0, 0, 19, 1, 0,
		0, 0, 0, 21, 1, 0, 0, 0, 0, 23, 1, 0, 0, 0, 0, 25, 1, 0, 0, 0, 0, 35, 1,
		0, 0, 0, 0, 37, 1, 0, 0, 0, 0, 39, 1, 0, 0, 0, 0, 47, 1, 0, 0, 0, 1, 49,
		1, 0, 0, 0, 3, 51, 1, 0, 0, 0, 5, 53, 1, 0, 0, 0, 7, 55, 1, 0, 0, 0, 9,
		57, 1, 0, 0, 0, 11, 59, 1, 0, 0, 0, 13, 61, 1, 0, 0, 0, 15, 70, 1, 0, 0,
		0, 17, 77, 1, 0, 0, 0, 19, 84, 1, 0, 0, 0, 21, 94, 1, 0, 0, 0, 23, 113,
		1, 0, 0, 0, 25, 115, 1, 0, 0, 0, 27, 120, 1, 0, 0, 0, 29, 125, 1, 0, 0,
		0, 31, 131, 1, 0, 0, 0, 33, 133, 1, 0, 0, 0, 35, 136, 1, 0, 0, 0, 37, 170,
		1, 0, 0, 0, 39, 173, 1, 0, 0, 0, 41, 197, 1, 0, 0, 0, 43, 207, 1, 0, 0,
		0, 45, 209, 1, 0, 0, 0, 47, 216, 1, 0, 0, 0, 49, 50, 5, 91, 0, 0, 50, 2,
		1, 0, 0, 0, 51, 52, 5, 44, 0, 0, 52, 4, 1, 0, 0, 0, 53, 54, 5, 93, 0, 0,
		54, 6, 1, 0, 0, 0, 55, 56, 5, 123, 0, 0, 56, 8, 1, 0, 0, 0, 57, 58, 5,
		125, 0, 0, 58, 10, 1, 0, 0, 0, 59, 60, 5, 58, 0, 0, 60, 12, 1, 0, 0, 0,
		61, 62, 5, 58, 0, 0, 62, 63, 5, 58, 0, 0, 63, 64, 5, 118, 0, 0, 64, 65,
		5, 101, 0, 0, 65, 66, 5, 114, 0, 0, 66, 67, 5, 116, 0, 0, 67, 68, 5, 101,
		0, 0, 68, 69, 5, 120, 0, 0, 69, 14, 1, 0, 0, 0, 70, 71, 5, 58, 0, 0, 71,
		72, 5, 58, 0, 0, 72, 73, 5, 101, 0, 0, 73, 74, 5, 100, 0, 0, 74, 75, 5,
		103, 0, 0, 75, 76, 5, 101, 0, 0, 76, 16, 1, 0, 0, 0, 77, 78, 5, 58, 0,
		0, 78, 79, 5, 58, 0, 0, 79, 80, 5, 112, 0, 0, 80, 81, 5, 97, 0, 0, 81,
		82, 5, 116, 0, 0, 82, 83, 5, 104, 0, 0, 83, 18, 1, 0, 0, 0, 84, 85, 5,
		58, 0, 0, 85, 86, 5, 58, 0, 0, 86, 87, 5, 110, 0, 0, 87, 88, 5, 117, 0,
		0, 88, 89, 5, 109, 0, 0, 89, 90, 5, 101, 0, 0, 90, 91, 5, 114, 0, 0, 91,
		92, 5, 105, 0, 0, 92, 93, 5, 99, 0, 0, 93, 20, 1, 0, 0, 0, 94, 99, 5, 34,
		0, 0, 95, 98, 3, 27, 13, 0, 96, 98, 3, 33, 16, 0, 97, 95, 1, 0, 0, 0, 97,
		96, 1, 0, 0, 0, 98, 101, 1, 0, 0, 0, 99, 97, 1, 0, 0, 0, 99, 100, 1, 0,
		0, 0, 100, 102, 1, 0, 0, 0, 101, 99, 1, 0, 0, 0, 102, 103, 5, 34, 0, 0,
		103, 22, 1, 0, 0, 0, 104, 105, 5, 116, 0, 0, 105, 106, 5, 114, 0, 0, 106,
		107, 5, 117, 0, 0, 107, 114, 5, 101, 0, 0, 108, 109, 5, 102, 0, 0, 109,
		110, 5, 97, 0, 0, 110, 111, 5, 108, 0, 0, 111, 112, 5, 115, 0, 0, 112,
		114, 5, 101, 0, 0, 113, 104, 1, 0, 0, 0, 113, 108, 1, 0, 0, 0, 114, 24,
		1, 0, 0, 0, 115, 116, 5, 110, 0, 0, 116, 117, 5, 117, 0, 0, 117, 118, 5,
		108, 0, 0, 118, 119, 5, 108, 0, 0, 119, 26, 1, 0, 0, 0, 120, 123, 5, 92,
		0, 0, 121, 124, 7, 0, 0, 0, 122, 124, 3, 29, 14, 0, 123, 121, 1, 0, 0,
		0, 123, 122, 1, 0, 0, 0, 124, 28, 1, 0, 0, 0, 125, 126, 5, 117, 0, 0, 126,
		127, 3, 31, 15, 0, 127, 128, 3, 31, 15, 0, 128, 129, 3, 31, 15, 0, 129,
		130, 3, 31, 15, 0, 130, 30, 1, 0, 0, 0, 131, 132, 7, 1, 0, 0, 132, 32,
		1, 0, 0, 0, 133, 134, 8, 2, 0, 0, 134, 34, 1, 0, 0, 0, 135, 137, 5, 45,
		0, 0, 136, 135, 1, 0, 0, 0, 136, 137, 1, 0, 0, 0, 137, 138, 1, 0, 0, 0,
		138, 145, 3, 41, 20, 0, 139, 141, 5, 46, 0, 0, 140, 142, 7, 3, 0, 0, 141,
		140, 1, 0, 0, 0, 142, 143, 1, 0, 0, 0, 143, 141, 1, 0, 0, 0, 143, 144,
		1, 0, 0, 0, 144, 146, 1, 0, 0, 0, 145, 139, 1, 0, 0, 0, 145, 146, 1, 0,
		0, 0, 146, 148, 1, 0, 0, 0, 147, 149, 3, 45, 22, 0, 148, 147, 1, 0, 0,
		0, 148, 149, 1, 0, 0, 0, 149, 36, 1, 0, 0, 0, 150, 151, 5, 78, 0, 0, 151,
		152, 5, 97, 0, 0, 152, 171, 5, 78, 0, 0, 153, 154, 5, 45, 0, 0, 154, 155,
		5, 73, 0, 0, 155, 156, 5, 110, 0, 0, 156, 157, 5, 102, 0, 0, 157, 158,
		5, 105, 0, 0, 158, 159, 5, 110, 0, 0, 159, 160, 5, 105, 0, 0, 160, 161,
		5, 116, 0, 0, 161, 171, 5, 121, 0, 0, 162, 163, 5, 73, 0, 0, 163, 164,
		5, 110, 0, 0, 164, 165, 5, 102, 0, 0, 165, 166, 5, 105, 0, 0, 166, 167,
		5, 110, 0, 0, 167, 168, 5, 105, 0, 0, 168, 169, 5, 116, 0, 0, 169, 171,
		5, 121, 0, 0, 170, 150, 1, 0, 0, 0, 170, 153, 1, 0, 0, 0, 170, 162, 1,
		0, 0, 0, 171, 38, 1, 0, 0, 0, 172, 174, 5, 45, 0, 0, 173, 172, 1, 0, 0,
		0, 173, 174, 1, 0, 0, 0, 174, 175, 1, 0, 0, 0, 175, 182, 3, 41, 20, 0,
		176, 178, 5, 46, 0, 0, 177, 179, 7, 3, 0, 0, 178, 177, 1, 0, 0, 0, 179,
		180, 1, 0, 0, 0, 180, 178, 1, 0, 0, 0, 180, 181, 1, 0, 0, 0, 181, 183,
		1, 0, 0, 0, 182, 176, 1, 0, 0, 0, 182, 183, 1, 0, 0, 0, 183, 185, 1, 0,
		0, 0, 184, 186, 3, 45, 22, 0, 185, 184, 1, 0, 0, 0, 185, 186, 1, 0, 0,
		0, 186, 187, 1, 0, 0, 0, 187, 188, 3, 19, 9, 0, 188, 40, 1, 0, 0, 0, 189,
		198, 5, 48, 0, 0, 190, 194, 7, 4, 0, 0, 191, 193, 7, 3, 0, 0, 192, 191,
		1, 0, 0, 0, 193, 196, 1, 0, 0, 0, 194, 192, 1, 0, 0, 0, 194, 195, 1, 0,
		0, 0, 195, 198, 1, 0, 0, 0, 196, 194, 1, 0, 0, 0, 197, 189, 1, 0, 0, 0,
		197, 190, 1, 0, 0, 0, 198, 42, 1, 0, 0, 0, 199, 208, 5, 48, 0, 0, 200,
		204, 7, 3, 0, 0, 201, 203, 7, 3, 0, 0, 202, 201, 1, 0, 0, 0, 203, 206,
		1, 0, 0, 0, 204, 202, 1, 0, 0, 0, 204, 205, 1, 0, 0, 0, 205, 208, 1, 0,
		0, 0, 206, 204, 1, 0, 0, 0, 207, 199, 1, 0, 0, 0, 207, 200, 1, 0, 0, 0,
		208, 44, 1, 0, 0, 0, 209, 211, 7, 5, 0, 0, 210, 212, 7, 6, 0, 0, 211, 210,
		1, 0, 0, 0, 211, 212, 1, 0, 0, 0, 212, 213, 1, 0, 0, 0, 213, 214, 3, 43,
		21, 0, 214, 46, 1, 0, 0, 0, 215, 217, 7, 7, 0, 0, 216, 215, 1, 0, 0, 0,
		217, 218, 1, 0, 0, 0, 218, 216, 1, 0, 0, 0, 218, 219, 1, 0, 0, 0, 219,
		220, 1, 0, 0, 0, 220, 221, 6, 23, 0, 0, 221, 48, 1, 0, 0, 0, 20, 0, 97,
		99, 113, 123, 136, 143, 145, 148, 170, 173, 180, 182, 185, 194, 197, 204,
		207, 211, 218, 1, 6, 0, 0,
	}
	deserializer := antlr.NewATNDeserializer(nil)
	staticData.atn = deserializer.Deserialize(staticData.serializedATN)
	atn := staticData.atn
	staticData.decisionToDFA = make([]*antlr.DFA, len(atn.DecisionToState))
	decisionToDFA := staticData.decisionToDFA
	for index, state := range atn.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(state, index)
	}
}

// AgeLexerInit initializes any static state used to implement AgeLexer. By default the
// static state used to implement the lexer is lazily initialized during the first call to
// NewAgeLexer(). You can call this function if you wish to initialize the static state ahead
// of time.
func AgeLexerInit() {
	staticData := &agelexerLexerStaticData
	staticData.once.Do(agelexerLexerInit)
}

// NewAgeLexer produces a new lexer instance for the optional input antlr.CharStream.
func NewAgeLexer(input antlr.CharStream) *AgeLexer {
	AgeLexerInit()
	l := new(AgeLexer)
	l.BaseLexer = antlr.NewBaseLexer(input)
	staticData := &agelexerLexerStaticData
	l.Interpreter = antlr.NewLexerATNSimulator(l, staticData.atn, staticData.decisionToDFA, staticData.predictionContextCache)
	l.channelNames = staticData.channelNames
	l.modeNames = staticData.modeNames
	l.RuleNames = staticData.ruleNames
	l.LiteralNames = staticData.literalNames
	l.SymbolicNames = staticData.symbolicNames
	l.GrammarFileName = "Age.g4"
	// TODO: l.EOF = antlr.TokenEOF

	return l
}

// AgeLexer tokens.
const (
	AgeLexerT__0       = 1
	AgeLexerT__1       = 2
	AgeLexerT__2       = 3
	AgeLexerT__3       = 4
	AgeLexerT__4       = 5
	AgeLexerT__5       = 6
	AgeLexerKW_VERTEX  = 7
	AgeLexerKW_EDGE    = 8
	AgeLexerKW_PATH    = 9
	AgeLexerKW_NUMERIC = 10
	AgeLexerSTRING     = 11
	AgeLexerBOOL       = 12
	AgeLexerNULL       = 13
	AgeLexerNUMBER     = 14
	AgeLexerFLOAT_EXPR = 15
	AgeLexerNUMERIC    = 16
	AgeLexerWS         = 17
)
